{"version":3,"file":"static/js/781.59df5c1e.chunk.js","mappings":"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","sources":["components/Form/FormControls/Forms_Controls.tsx","components/Login/Login.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Form/FormControls/FormControl.module.css?5a84"],"sourcesContent":["import s from \"./FormControl.module.css\";\n\nimport {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  ReactNode,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { Field } from \"redux-form\";\n\ninterface FormControlProps {\n  meta?: { touched: boolean; error: string }; // Уточненный тип для meta\n  children: ReactNode; // Ребёнок-компонент (textarea, input и т.д.)\n}\n\nexport const FormControl = (props: FormControlProps) => {\n  const hasError = props.meta && props.meta.touched && props.meta.error;\n\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\n      {props.children} {/* Рендеринг ребенка */}\n      {hasError && <span>{props.meta?.error}</span>}\n    </div>\n  );\n};\n\n// Пример использования для Textarea\ninterface TextareaProps {\n  input: DetailedHTMLProps<\n    TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Textarea = (props: TextareaProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <textarea {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\n// Пример использования для Input\ninterface InputProps {\n  input: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Input = (props: InputProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <input {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder: string,\n  name: string,\n  validators: [],\n  component: React.FC<any>,\n  props = {},\n  text = \"\"\n) => {\n  return (\n    <div>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\nimport { Input } from \"../Form/FormControls/Forms_Controls\";\nimport {\n  maxlenghtCreator,\n  requiredField,\n} from \"../../utils/validators/validators\";\nimport { connect } from \"react-redux\";\nimport { LoginTC } from \"../../redux/auth-reducer\";\nimport { Redirect } from \"react-router-dom\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport s from \"../Form/FormControls/FormControl.module.css\";\nimport { getAuthSelector, getCaptchaSelector } from \"../../redux/selectors\";\n\n// Типы пропсов для Login\nexport type LoginPropsType = {\n  isAuth: boolean;\n  captcha: string | null;\n  LoginTC: (\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha: any\n  ) => void;\n};\n\n// Компонент Login\nconst Login: React.FC<LoginPropsType> = React.memo((props) => {\n  const onSubmit = (formData: any) => {\n    props.LoginTC(\n      formData.email,\n      formData.password,\n      formData.rememberMe,\n      formData.captcha\n    );\n  };\n\n  if (props.isAuth) {\n    return <Redirect to={\"profile\"} />;\n  }\n\n  return (\n    <section>\n      <h1>LOGIN</h1>\n      <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha} />\n    </section>\n  );\n});\n\n// Типы пропсов для LoginForm\ntype LoginFormPropsType = {\n  captcha: string | null;\n};\n\nconst LoginForm: React.FC<\n  LoginFormPropsType & InjectedFormProps<{}, LoginFormPropsType>\n> = (props) => {\n  const max40 = maxlenghtCreator(40);\n\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        type=\"email\"\n        name=\"email\"\n        placeholder={\"email\"}\n        component={Input}\n        validate={[requiredField]}\n      />\n      <Field\n        type=\"password\"\n        name=\"password\"\n        placeholder={\"password\"}\n        component={Input}\n        validate={[requiredField]}\n      />\n      <label htmlFor=\"rememberMe\">\n        <Field type=\"checkbox\" name=\"rememberMe\" component={Input} /> remember\n        me\n      </label>\n      {props.captcha && <img src={props.captcha} alt=\"Captcha\" />}\n      {props.captcha && (\n        <Field\n          type=\"text\"\n          name=\"captcha\"\n          placeholder=\"Enter captcha\"\n          component={Input}\n          validate={[requiredField]}\n        />\n      )}\n      <div className={s.formControl_common_error}>{props.error}</div>\n      <button type={\"submit\"}>Login</button>\n    </form>\n  );\n};\n\n// Обертывание в reduxForm\nconst LoginReduxForm = reduxForm<{}, LoginFormPropsType>({\n  form: \"login\",\n})(LoginForm);\n\n// mapStateToProps\ntype mapStateToPropsType = {\n  isAuth: boolean;\n  captcha: string | null;\n};\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    isAuth: getAuthSelector(state),\n    captcha: getCaptchaSelector(state),\n  };\n};\n\nexport default connect(mapStateToProps, { LoginTC })(Login);\n","export const requiredField = (value: any) => {\n  if (value) return undefined;\n\n  return \"field is required\";\n};\n\nexport const max30 = (value: any) => {\n  if (value && value.lenght > 30) return \"max lenght is > 30\";\n\n  return undefined;\n};\n\nexport const maxlenghtCreator = (Maxlenght: any) => (value: any) => {\n  if (value && value.Maxlenght > 30) return `max lenght is ${Maxlenght}> 30`;\n\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__50rF8\",\"error\":\"FormControl_error__DCD0n\",\"formControl_common_error\":\"FormControl_formControl_common_error__+Ke55\"};"],"names":["FormControl","props","_props$meta","hasError","meta","touched","error","_jsxs","className","concat","s","formControl","children","_jsx","Textarea","_objectSpread","input","Input","createField","placeholder","name","validators","component","arguments","length","undefined","text","Field","validate","Login","React","isAuth","Redirect","to","LoginReduxForm","onSubmit","formData","LoginTC","email","password","rememberMe","captcha","reduxForm","form","maxlenghtCreator","handleSubmit","type","requiredField","htmlFor","src","alt","formControl_common_error","connect","state","getAuthSelector","getCaptchaSelector","value","Maxlenght"],"sourceRoot":""}