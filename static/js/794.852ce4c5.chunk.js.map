{"version":3,"file":"static/js/794.852ce4c5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?b99f","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Form/FormControls/Forms_Controls.tsx","components/HOC/AuthWithRedirect.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Form/FormControls/FormControl.module.css?5a84"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"avatar_dialog\":\"Dialogs_avatar_dialog__fiUTB\",\"dialog\":\"Dialogs_dialog__htSTl\",\"list\":\"Dialogs_list__X6lCb\",\"link\":\"Dialogs_link__LWAut\",\"active\":\"Dialogs_active__t8cjl\",\"messages_area\":\"Dialogs_messages_area__oFFrg\",\"message_form\":\"Dialogs_message_form__KRwU7\",\"text_message\":\"Dialogs_text_message__2iEfy\",\"dialogitem\":\"Dialogs_dialogitem__yKsS5\",\"dialogMessagetem\":\"Dialogs_dialogMessagetem__B5CY1\"};","import React, { useMemo } from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { DialogMessagesType, DialogType } from \"../../redux/redux-store\";\nimport { DialogsPropsType } from \"./DialogsContainer\";\nimport { Field, reduxForm } from \"redux-form\";\nimport {\n  maxlenghtCreator,\n  requiredField,\n} from \"../../utils/validators/validators\";\nimport { Textarea } from \"../Form/FormControls/Forms_Controls\";\nimport image from \"./../../img/images.jpeg\";\n\nconst Dialogs: React.FC<DialogsPropsType> = React.memo((props) => {\n  const max10 = maxlenghtCreator(10);\n  const onSubmitDialog = useMemo(\n    () => (data: any) => {\n      props.onClickSendDialog(data.dialogName);\n      props.onClickSendDialog((data.dialogName = \"\"));\n    },\n    [props.onClickSendDialog, props.onClickSendDialog]\n  );\n  const DialogForm = (props: any) => {\n    return (\n      <form className={s.message_form} onSubmit={props.handleSubmit}>\n        <Field\n          name={\"dialogName\"}\n          id={\"dialogName\"}\n          component={Textarea}\n          placeholder={\"message\"}\n          validate={[requiredField, max10]}\n          className={s.text_message}\n        />\n        <button>Send</button>\n      </form>\n    );\n  };\n\n  const DialogReduxForm = reduxForm({\n    // a unique name for the form\n    form: \"Dialog\",\n  })(DialogForm);\n\n  let dialogItems = props.dialogsName.map((item: DialogType) => {\n    return (\n      <li className={s.dialogitem} key={item.id}>\n        <img className={s.avatar_dialog} src={image} alt=\"avatar\" />\n        <NavLink\n          className={s.link}\n          activeClassName={s.active}\n          to={\"/dialogs/\" + item.path}\n        >\n          {item.name}\n        </NavLink>\n      </li>\n    );\n  });\n\n  let dialogMessageItem = props.dialogsMessages.map(\n    (item: DialogMessagesType) => {\n      return (\n        <li className={s.dialogMessagetem} key={item.id}>\n          {item.message}\n        </li>\n      );\n    }\n  );\n\n  return (\n    <section className={s.dialogs}>\n      <ul className={s.dialog}>{dialogItems}</ul>\n      <ul className={s.messages}>{dialogMessageItem}</ul>\n      <div className={s.messages_area}>\n        <DialogReduxForm onSubmit={onSubmitDialog} />\n      </div>\n    </section>\n  );\n});\n\nexport { Dialogs };\n","import {\n  AppStateType,\n  DialogMessagesType,\n  DialogType,\n} from \"../../redux/redux-store\";\nimport { addSMSAC } from \"../../redux/dialog-reducer\";\nimport { Dialogs } from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { compose, Dispatch } from \"redux\";\nimport { AuthWithRedirect } from \"../HOC/AuthWithRedirect\";\nimport {\n  getAuthSelector,\n  getDialogsMessagesSelector,\n  getDialogsNameSelector,\n} from \"../../redux/selectors\";\n\ntype mapDispatchToPropsType = {\n  onClickSendDialog: (t: string) => void;\n};\ntype mapStateToPropsType = {\n  dialogsMessages: Array<DialogMessagesType>;\n\n  dialogsName: Array<DialogType>;\n  auth: boolean;\n};\n\nexport type DialogsPropsType = mapDispatchToPropsType & mapStateToPropsType;\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n  return {\n    onClickSendDialog: (t: string) => {\n      dispatch(addSMSAC(t));\n    },\n  };\n};\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    dialogsMessages: getDialogsMessagesSelector(state),\n    dialogsName: getDialogsNameSelector(state),\n    auth: getAuthSelector(state),\n  };\n};\nconst DialogsContainer = compose<React.ComponentType>(\n  connect(mapStateToProps, mapDispatchToProps),\n  AuthWithRedirect\n)(Dialogs);\n\nexport default DialogsContainer;\n","import s from \"./FormControl.module.css\";\n\nimport {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  ReactNode,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { Field } from \"redux-form\";\n\ninterface FormControlProps {\n  meta?: { touched: boolean; error: string }; // Уточненный тип для meta\n  children: ReactNode; // Ребёнок-компонент (textarea, input и т.д.)\n}\n\nexport const FormControl = (props: FormControlProps) => {\n  const hasError = props.meta && props.meta.touched && props.meta.error;\n\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\n      {props.children} {/* Рендеринг ребенка */}\n      {hasError && <span>{props.meta?.error}</span>}\n    </div>\n  );\n};\n\n// Пример использования для Textarea\ninterface TextareaProps {\n  input: DetailedHTMLProps<\n    TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Textarea = (props: TextareaProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <textarea {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\n// Пример использования для Input\ninterface InputProps {\n  input: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Input = (props: InputProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <input {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder: string,\n  name: string,\n  validators: [],\n  component: React.FC<any>,\n  props = {},\n  text = \"\"\n) => {\n  return (\n    <div>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { getAuthSelector } from \"../../redux/selectors\";\n\ntype MapStateToProps = {\n  isAuth: boolean;\n};\n\nlet mapStateToPropsRedirectComponent = (\n  state: AppStateType\n): MapStateToProps => {\n  return {\n    isAuth: getAuthSelector(state),\n  };\n};\n\nexport const AuthWithRedirect = <T,>(Component: React.ComponentType<T>) => {\n  class RedirectComponent extends React.Component<MapStateToProps> {\n    render() {\n      const { isAuth, ...restProps } = this.props;\n\n      if (isAuth === false) return <Redirect to={\"/login\"} />;\n\n      return <Component {...(restProps as T & {})} />;\n    }\n  }\n\n  let ConnectedIsAuthRedirectComponent = connect(\n    mapStateToPropsRedirectComponent\n  )(RedirectComponent);\n  return ConnectedIsAuthRedirectComponent;\n};\n","export const requiredField = (value: any) => {\n  if (value) return undefined;\n\n  return \"field is required\";\n};\n\nexport const max30 = (value: any) => {\n  if (value && value.lenght > 30) return \"max lenght is > 30\";\n\n  return undefined;\n};\n\nexport const maxlenghtCreator = (Maxlenght: any) => (value: any) => {\n  if (value && value.Maxlenght > 30) return `max lenght is ${Maxlenght}> 30`;\n\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__50rF8\",\"error\":\"FormControl_error__DCD0n\",\"formControl_common_error\":\"FormControl_formControl_common_error__+Ke55\"};"],"names":["Dialogs","React","props","max10","maxlenghtCreator","onSubmitDialog","useMemo","data","onClickSendDialog","dialogName","DialogReduxForm","reduxForm","form","_jsxs","className","s","message_form","onSubmit","handleSubmit","children","_jsx","Field","name","id","component","Textarea","placeholder","validate","requiredField","text_message","dialogItems","dialogsName","map","item","dialogitem","avatar_dialog","src","image","alt","NavLink","link","activeClassName","active","to","path","dialogMessageItem","dialogsMessages","dialogMessagetem","message","dialogs","dialog","messages","messages_area","compose","connect","state","getDialogsMessagesSelector","getDialogsNameSelector","auth","getAuthSelector","dispatch","t","addSMSAC","AuthWithRedirect","FormControl","_props$meta","hasError","meta","touched","error","concat","formControl","_objectSpread","input","Input","createField","validators","arguments","length","undefined","text","mapStateToPropsRedirectComponent","isAuth","Component","RedirectComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","value","_this$props","this","restProps","_objectWithoutProperties","_excluded","Redirect","Maxlenght"],"sourceRoot":""}