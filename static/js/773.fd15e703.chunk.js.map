{"version":3,"file":"static/js/773.fd15e703.chunk.js","mappings":"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","sources":["components/Form/FormControls/Forms_Controls.tsx","components/HOC/AuthWithRedirect.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?d015","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?218b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/EditableSpan/EditableSpan.tsx","components/Profile/ProfileInfoForm.tsx","components/Profile/Profile.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/Form/FormControls/FormControl.module.css?5a84"],"sourcesContent":["import s from \"./FormControl.module.css\";\n\nimport {\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  ReactNode,\n  TextareaHTMLAttributes,\n} from \"react\";\nimport { Field } from \"redux-form\";\n\ninterface FormControlProps {\n  meta?: { touched: boolean; error: string }; // Уточненный тип для meta\n  children: ReactNode; // Ребёнок-компонент (textarea, input и т.д.)\n}\n\nexport const FormControl = (props: FormControlProps) => {\n  const hasError = props.meta && props.meta.touched && props.meta.error;\n\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\n      {props.children} {/* Рендеринг ребенка */}\n      {hasError && <span>{props.meta?.error}</span>}\n    </div>\n  );\n};\n\n// Пример использования для Textarea\ninterface TextareaProps {\n  input: DetailedHTMLProps<\n    TextareaHTMLAttributes<HTMLTextAreaElement>,\n    HTMLTextAreaElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Textarea = (props: TextareaProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <textarea {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\n// Пример использования для Input\ninterface InputProps {\n  input: DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  >;\n  meta?: { touched: boolean; error: string };\n\n  [key: string]: any;\n}\n\nexport const Input = (props: InputProps) => {\n  return (\n    <FormControl meta={props.meta}>\n      <input {...props.input} {...props} />\n    </FormControl>\n  );\n};\n\nexport const createField = (\n  placeholder: string,\n  name: string,\n  validators: [],\n  component: React.FC<any>,\n  props = {},\n  text = \"\"\n) => {\n  return (\n    <div>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        validate={validators}\n        component={component}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport { getAuthSelector } from \"../../redux/selectors\";\n\ntype MapStateToProps = {\n  isAuth: boolean;\n};\n\nlet mapStateToPropsRedirectComponent = (\n  state: AppStateType\n): MapStateToProps => {\n  return {\n    isAuth: getAuthSelector(state),\n  };\n};\n\nexport const AuthWithRedirect = <T,>(Component: React.ComponentType<T>) => {\n  class RedirectComponent extends React.Component<MapStateToProps> {\n    render() {\n      const { isAuth, ...restProps } = this.props;\n\n      if (isAuth === false) return <Redirect to={\"/login\"} />;\n\n      return <Component {...(restProps as T & {})} />;\n    }\n  }\n\n  let ConnectedIsAuthRedirectComponent = connect(\n    mapStateToPropsRedirectComponent\n  )(RedirectComponent);\n  return ConnectedIsAuthRedirectComponent;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__VHbzQ\",\"photo_profile\":\"Profile_photo_profile__2s4fk\",\"wrapper_profile\":\"Profile_wrapper_profile__YOj04\",\"profile_id\":\"Profile_profile_id__54EdN\",\"avatar\":\"Profile_avatar__NzF5E\",\"profile_info\":\"Profile_profile_info__hMQWP\",\"edit_btn_profile\":\"Profile_edit_btn_profile__5u462\"};","// extracted by mini-css-extract-plugin\nexport default {\"myposts\":\"MyPosts_myposts__6+UXN\",\"textfield_post\":\"MyPosts_textfield_post__7IfeP\",\"post_btn_sbm\":\"MyPosts_post_btn_sbm__jyQs7\",\"list_post\":\"MyPosts_list_post__hHnpa\",\"post_img\":\"MyPosts_post_img__SD0VB\",\"post_item\":\"MyPosts_post_item__l3gjg\",\"heartbeat\":\"MyPosts_heartbeat__QFDUe\",\"heart_btn\":\"MyPosts_heart_btn__Fki-3\"};","import React from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport { MyPostsPropsType } from \"./MyPostsContainer\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../../Form/FormControls/Forms_Controls\";\nimport {\n  maxlenghtCreator,\n  requiredField,\n} from \"../../../utils/validators/validators\";\nimport image from \"../../../img/images.jpeg\";\n\nconst MyPosts: React.FC<MyPostsPropsType> = React.memo((props) => {\n  const max20 = maxlenghtCreator(20);\n  const onSubmitPost = (data: any) => {\n    props.addPostNow(data.PostName);\n    props.addPostNow((data.PostName = \"\"));\n  };\n  const PostForm = (props: any) => {\n    return (\n      <form onSubmit={props.handleSubmit}>\n        <Field\n          name={\"PostName\"}\n          id={\"PostName\"}\n          component={Textarea}\n          placeholder={\"message\"}\n          validate={[requiredField, max20]}\n          className={s.textfield_post}\n        />\n        <button className={s.post_btn_sbm}>Send</button>\n      </form>\n    );\n  };\n\n  const PostReduxForm = reduxForm({\n    // a unique name for the form\n    form: \"PostProfilePage\",\n  })(PostForm);\n\n  let postsItem = props.posts.map((i) => {\n    const onDeleteHandler = () => {\n      props.onDeleteHandler(i.id);\n    };\n    const onAddLikeHandler = () => {\n      props.onAddLikeHandler(i.id);\n    };\n    return (\n      <li className={s.post_item} key={i.id}>\n        <img\n          className={s.post_img}\n          src={props.profile.photos.large || image}\n          alt=\"avatar\"\n          width=\"50\"\n          height=\"50\"\n        />\n        <div>\n          <blockquote>{i.messageText}</blockquote>\n          <button onClick={onDeleteHandler}>X</button>\n        </div>\n\n        <div>\n          <button className={s.heart_btn} onClick={onAddLikeHandler}>\n            {i.like}\n          </button>\n        </div>\n      </li>\n    );\n  });\n\n  return (\n    <div className={s.myposts}>\n      <h2>My Posts</h2>\n\n      <div className=\"new_post\">\n        <PostReduxForm onSubmit={onSubmitPost} />\n      </div>\n      <ul className={s.list_post}>{postsItem}</ul>\n    </div>\n  );\n});\n\nexport { MyPosts };\n","import { AppStateType, PostsType } from \"../../../redux/redux-store\";\nimport {\n  AddLikeAC,\n  addPostAC,\n  deletePostAC,\n  ProfileType,\n} from \"../../../redux/profile-reducer\";\nimport { MyPosts } from \"./MyPosts\";\nimport { Dispatch } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { getPostSelector, getProfileSelector } from \"../../../redux/selectors\";\n\ntype mapDispatchToPropsType = {\n  addPostNow: (n: string) => void;\n\n  onDeleteHandler: (id: string) => void;\n  onAddLikeHandler: (id: string) => void;\n};\ntype mapStateToPropsType = {\n  posts: Array<PostsType>;\n  profile: ProfileType;\n};\n\nexport type MyPostsPropsType = mapDispatchToPropsType & mapStateToPropsType;\n\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    posts: getPostSelector(state),\n    profile: getProfileSelector(state),\n  };\n};\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n  return {\n    addPostNow: (n: string) => {\n      dispatch(addPostAC(n));\n    },\n\n    onDeleteHandler: (id: string) => {\n      dispatch(deletePostAC(id));\n    },\n    onAddLikeHandler: (id: string) => {\n      dispatch(AddLikeAC(id));\n    },\n  };\n};\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport { MyPostsContainer };\n","import React, { ChangeEvent, useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n  console.log(\"EditableSpan called\");\n  let [editMode, setEditMode] = useState(false);\n  let [title, setTitle] = useState(props.value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(props.value);\n  };\n  const activateViewMode = () => {\n    setEditMode(false);\n    props.onChange(title);\n  };\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      value={title}\n      onChange={changeTitle}\n      autoFocus\n      onBlur={activateViewMode}\n    />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\n  );\n});\n","import React from \"react\";\nimport {\n  createField,\n  Input,\n  Textarea,\n} from \"../Form/FormControls/Forms_Controls\";\nimport { reduxForm } from \"redux-form\";\nimport s from \"../Form/FormControls/FormControl.module.css\";\n\nconst ProfileInfoForm = (props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <button type=\"submit\">Save</button>\n      <label>\n        Full name:{props.profile.fullName}\n        {createField(\"FullName\", \"fullName\", [], Input)}\n      </label>\n      <label>\n        Looking for a job:\n        {createField(\"LookingForAJob\", \"lookingForAJob\", [], Input, {\n          type: \"checkbox\",\n        })}\n      </label>\n      <label>\n        Job description:{props.profile.lookingForAJobDescription}\n        {createField(\n          \"LookingForAJobDescription\",\n          \"lookingForAJobDescription\",\n          [],\n          Textarea\n        )}\n      </label>\n      <label>\n        About me:{props.profile.aboutMe}\n        {createField(\"AboutMe\", \"aboutMe\", [], Textarea)}\n      </label>\n      {Object.keys(props.profile.contacts).map((i) => {\n        return (\n          <label>\n            {i}:{props.profile[i]}\n            {createField(i, \"contacts.\" + i, [], Input)}\n          </label>\n        );\n      })}\n      <div className={s.formControl_common_error}>{props.error}</div>\n    </form>\n  );\n};\nconst ProfileInfoFormRedux = reduxForm({ form: \"ProfileInfoForm\" })(\n  ProfileInfoForm\n);\nexport default ProfileInfoFormRedux;\n","import React, { useEffect, useState } from \"react\";\nimport s from \"./Profile.module.css\";\nimport { MyPostsContainer } from \"./MyPosts/MyPostsContainer\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../redux/redux-store\";\nimport {\n  getProfileTC,\n  ProfileType,\n  savePhotoTC,\n  setProfileAC,\n  setStatusAC,\n  updateProfileTC,\n  updateStatusTC,\n} from \"../../redux/profile-reducer\";\nimport { setFetchingAC } from \"../../redux/users-reducer\";\nimport { EditableSpan } from \"../EditableSpan/EditableSpan\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { AuthWithRedirect } from \"../HOC/AuthWithRedirect\";\nimport { compose } from \"redux\";\nimport {\n  getAuthIdSelector,\n  getAuthSelector,\n  getErrorSelector,\n  getFetchSelector,\n  getProfileSelector,\n  getStatusSelector,\n} from \"../../redux/selectors\";\nimport image from \"./../../img/images.jpeg\";\nimport ProfileInfoFormRedux from \"./ProfileInfoForm\";\n// TYPES\ntype PathParamsType = { userId?: string };\n\ntype ProfilePropsType = {\n  profile: ProfileType;\n  isFetching: boolean;\n  status: string;\n  auth: boolean;\n  error: boolean;\n  authId?: string;\n  setProfileAC: (profile: ProfileType) => void;\n  setFetchingAC: (isFetching: boolean) => void;\n  setStatusAC: (status: string) => void;\n  getProfileTC: (userId: string) => void;\n  updateStatusTC: (status: string) => void;\n  savePhotoTC: (photo: File) => void;\n  updateProfileTC: any;\n};\n\ntype ProfilePagePropsType = RouteComponentProps<PathParamsType> &\n  ProfilePropsType;\n//\nconst ProfileContainer: React.FC<ProfilePagePropsType> = React.memo((props) => {\n  // Destruction props\n  const {\n    profile,\n    authId,\n    match,\n    error,\n    getProfileTC,\n    savePhotoTC,\n    status,\n    updateStatusTC,\n    updateProfileTC,\n  } = props;\n\n  // Function for submit on ReduxForm\n  const onSubmit = (formData: any) => {\n    updateProfileTC(formData);\n    //   Use useEffect for go out from editMode on success\n  };\n\n  // EDIT MODE\n  const [editMode, setEditMode] = useState(false);\n  const onEditMode = () => {\n    setEditMode(true);\n  };\n  //\n\n  //  if we authoraized\n  const isOwner = !match.params.userId;\n\n  // Photo Change\n  const onPhotoSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      savePhotoTC(e.target.files[0]);\n    }\n  };\n\n  useEffect(() => {\n    const userId = match.params.userId || authId;\n    if (userId) {\n      getProfileTC(userId);\n    } else {\n      props.history.push(\"/login\");\n    }\n    if (error === false) {\n      setEditMode(false);\n    }\n  }, [match.params.userId, authId, getProfileTC, props.history, error]);\n\n  // Render Contacts list\n  const Contact = ({\n    contactName,\n    contactValue,\n  }: {\n    contactName: string;\n    contactValue: string | null;\n  }) => {\n    return (\n      <div>\n        <div>\n          {contactName} :{contactValue}{\" \"}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <section className={s.profile}>\n      <div className=\"container\">\n        <div className={s.wrapper_profile}>\n          <div>\n            <h2>Profile</h2>\n            <div className={s.profile_id}>Id: {profile.userId}</div>\n          </div>\n\n          {/*AVATAR*/}\n          <div className={s.avatar}>\n            <img src={profile.photos.large || image} alt=\"Avatar\" />\n          </div>\n\n          {/*CHANGE PHOTO*/}\n          {isOwner && (\n            <div className={s.photo_profile}>\n              <label htmlFor=\"photo\" className={s.photo_profile}>\n                Сменить фото\n                <input type=\"file\" id=\"photo\" onChange={onPhotoSelect} />\n              </label>\n            </div>\n          )}\n\n          {/*STATUS*/}\n          <EditableSpan value={status} onChange={updateStatusTC} />\n\n          {/*EDITMODE FORM*/}\n          <div className={s.profile_info}>\n            {editMode ? (\n              <ProfileInfoFormRedux\n                {...props}\n                initialValues={profile}\n                onSubmit={onSubmit}\n              />\n            ) : (\n              <div>\n                <div>Full Name:{profile.fullName}</div>\n                <div>\n                  Looking for a job:{profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                <div>Job description:{profile.lookingForAJobDescription}</div>\n                <div>About me:{profile.aboutMe}</div>\n\n                <div>\n                  <h3>Contacts</h3>\n                  {Object.keys(profile.contacts).map((i) => {\n                    // Используем правильный тип для ключей\n                    const contactValue =\n                      profile.contacts[i as keyof typeof profile.contacts];\n                    return (\n                      <Contact\n                        key={i}\n                        contactName={i}\n                        contactValue={contactValue}\n                      />\n                    );\n                  })}\n                </div>\n                <button className={s.edit_btn_profile} onClick={onEditMode}>\n                  EDIT\n                </button>\n              </div>\n            )}\n          </div>\n\n          <MyPostsContainer />\n        </div>\n      </div>\n    </section>\n  );\n});\n\n//  PROPS\nconst mapStateToProps = (state: AppStateType) => ({\n  profile: getProfileSelector(state),\n  isFetching: getFetchSelector(state),\n  status: getStatusSelector(state),\n  auth: getAuthSelector(state),\n  authId: getAuthIdSelector(state),\n  error: getErrorSelector(state),\n});\n\nexport default compose<React.ComponentType>(\n  AuthWithRedirect,\n  connect(mapStateToProps, {\n    setProfileAC,\n    setFetchingAC,\n    setStatusAC,\n    getProfileTC,\n    updateStatusTC,\n    savePhotoTC,\n    updateProfileTC,\n  }),\n  withRouter\n)(ProfileContainer);\n","export const requiredField = (value: any) => {\n  if (value) return undefined;\n\n  return \"field is required\";\n};\n\nexport const max30 = (value: any) => {\n  if (value && value.lenght > 30) return \"max lenght is > 30\";\n\n  return undefined;\n};\n\nexport const maxlenghtCreator = (Maxlenght: any) => (value: any) => {\n  if (value && value.Maxlenght > 30) return `max lenght is ${Maxlenght}> 30`;\n\n  return undefined;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__50rF8\",\"error\":\"FormControl_error__DCD0n\",\"formControl_common_error\":\"FormControl_formControl_common_error__+Ke55\"};"],"names":["FormControl","props","_props$meta","hasError","meta","touched","error","_jsxs","className","concat","s","formControl","children","_jsx","Textarea","_objectSpread","input","Input","createField","placeholder","name","validators","component","arguments","length","undefined","text","Field","validate","mapStateToPropsRedirectComponent","state","isAuth","getAuthSelector","AuthWithRedirect","Component","RedirectComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","value","_this$props","this","restProps","_objectWithoutProperties","_excluded","Redirect","to","React","connect","MyPosts","max20","maxlenghtCreator","PostReduxForm","reduxForm","form","onSubmit","handleSubmit","id","requiredField","postsItem","posts","map","i","src","profile","photos","large","image","alt","width","height","messageText","onClick","onDeleteHandler","onAddLikeHandler","like","data","addPostNow","PostName","MyPostsContainer","getPostSelector","getProfileSelector","dispatch","n","addPostAC","deletePostAC","AddLikeAC","EditableSpan","console","log","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","title","setTitle","TextField","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","type","fullName","lookingForAJobDescription","aboutMe","Object","keys","contacts","formControl_common_error","ProfileContainer","authId","match","getProfileTC","savePhotoTC","status","updateStatusTC","updateProfileTC","isOwner","params","userId","useEffect","history","push","Contact","_ref","contactName","contactValue","htmlFor","target","files","ProfileInfoFormRedux","initialValues","formData","lookingForAJob","compose","isFetching","getFetchSelector","getStatusSelector","auth","getAuthIdSelector","getErrorSelector","setProfileAC","setFetchingAC","setStatusAC","withRouter","Maxlenght"],"sourceRoot":""}